# Release new Arkcase version
# ============================

# Start a release branch from develop branch. Sets the develop branch to new snapshot version
# --------------------------------------------------------------------------------------------
# RELEASE_START: true
# RELEASE_VERSION: 3.3.3
# DEVELOP_NEW_VERSION: 3.3.4-SNAPSHOT

# Release RC1 (X) from release branch
# -----------------------------------
# RELEASE_CANDIDATE_X: true
# RELEASE_VERSION: 3.3.3
# RELEASE_CANDIDATE_SUFFIX: RC1

# Release final version, merges release branch in master (after no more release candidates are planned)
# -----------------------------------------------------------------------------------------------------
# RELEASE: true
# RELEASE_VERSION: 3.3.3


# Hotfix for older Arkcase released version
# =========================================

# Start support branch for a released Arkcase version (creates support/3.3.2 branch which can be used for all future release fixes for 3.3.2 version)
# ---------------------------------------------------------------------------------------------------------------------------------------------------
# START_SUPPORT_BRANCH: true
# RELEASE_TAG: 3.3.2

# Start hotfix for Arkcase support
# --------------------------------
# START_HOTFIX: true
# HOTFIX_SUPPORT_VERSION: 3.3.2 (**** keep this version for all additional hotfixes to the same base released version ****)
# RELEASE_VERSION: 3.3.2.1       (**** increment this version for additional hotfixes like 3.3.2.2 ****)

# Release new hotfix version
# --------------------------
# RELEASE_HOTFIX: true
# HOTFIX_SUPPORT_VERSION: 3.3.2
# RELEASE_VERSION: 3.3.2.1

release_start:
  stage: release
  only:
    variables:
     - $RELEASE_START
  script: |
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    mvn -B gitflow:release-start -DpushRemote=true -DversionProperty=revision -DreleaseVersion="${RELEASE_VERSION}" -DcommitDevelopmentVersionAtStart=true -DdevelopmentVersion="${DEVELOP_NEW_VERSION}"

release_candidate_X:
  stage: release
  only:
    variables:
     - $RELEASE_CANDIDATE_X
  script: |
    RC_VERSION="${RELEASE_VERSION}-${RELEASE_CANDIDATE_SUFFIX}"
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    git checkout "release/${RELEASE_VERSION}"
    git push origin "HEAD:refs/tags/${RC_VERSION}"
    mvn -Drevision="${RC_VERSION}" -DskipTests -T 4 -B deploy
    # Deploy the file for consumption by the Installer (this needs phasing out)
    sftp -b - "${SFTP_TARGET}" <<< $"put target/*.jar ${SFTP_FOLDER}/config-server-${RC_VERSION}.jar"
    # Deploy on test servers

release:
  stage: release
  only:
    variables:
     - $RELEASE
  script: |
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    git checkout "master"
    last_commit="$(git log --format="%H" -n 1)"
    echo "Last commit on master branch = ${last_commit}"
    git checkout "release/${RELEASE_VERSION}"
    mvn -B gitflow:release-finish -DskipTestProject=true -DcommitDevelopmentVersionAtStart=true
    git checkout "master"
    mvn -Drevision="${RELEASE_VERSION}" -DskipITs -T 4 -B deploy
    # Deploy the file for consumption by the Installer (this needs phasing out)
    sftp -b - "${SFTP_TARGET}" <<< $"put target/*.jar ${SFTP_FOLDER}/config-server-${RELEASE_VERSION}.jar"

start_support_branch:
  stage: release
  only:
    variables:
     - $START_SUPPORT_BRANCH
  script: |
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    mvn -B gitflow:support-start -DpushRemote=true -DtagName="${RELEASE_TAG}"

start_hotfix:
  stage: release
  only:
    variables:
     - $START_HOTFIX
  script:
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    git checkout "support/${HOTFIX_SUPPORT_VERSION}"
    mvn -B gitflow:hotfix-start -DpushRemote=true -DhotfixVersion="${RELEASE_VERSION}" -DfromBranch="support/${HOTFIX_SUPPORT_VERSION}"

release_hotfix:
  stage: release
  only:
    variables:
     - $RELEASE_HOTFIX
  script: |
    git config --global user.name "${GIT_USERNAME}"
    git config --global user.email "${GIT_USERMAIL}"
    git remote set-url origin "${GIT_URL}"
    git checkout "hotfix/support/${HOTFIX_SUPPORT_VERSION}/${RELEASE_VERSION}"
    git checkout "support/${HOTFIX_SUPPORT_VERSION}"
    mvn -B gitflow:hotfix-finish -DpushRemote=true -DhotfixVersion="support/${HOTFIX_SUPPORT_VERSION}/${RELEASE_VERSION}" -DskipTestProject=true -DskipMergeDevBranch=true
    mvn -Drevision="${RELEASE_VERSION}" -DskipITs -T 4 -B deploy
    # Deploy the file for consumption by the Installer (this needs phasing out)
    sftp -b - "${SFTP_TARGET}" <<< $"put target/*.jar ${SFTP_FOLDER}/config-server-${RELEASE_VERSION}.jar"
    # Deploy on test servers
